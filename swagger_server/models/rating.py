# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Rating(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id_rating: int=None, id_contenido: int=None, id_perfil: int=None, thumb_up: bool=None):  # noqa: E501
        """Rating - a model defined in Swagger

        :param id_rating: The id_rating of this Rating.  # noqa: E501
        :type id_rating: int
        :param id_contenido: The id_contenido of this Rating.  # noqa: E501
        :type id_contenido: int
        :param id_perfil: The id_perfil of this Rating.  # noqa: E501
        :type id_perfil: int
        :param thumb_up: The thumb_up of this Rating.  # noqa: E501
        :type thumb_up: bool
        """
        self.swagger_types = {
            'id_rating': int,
            'id_contenido': int,
            'id_perfil': int,
            'thumb_up': bool
        }

        self.attribute_map = {
            'id_rating': 'id_rating',
            'id_contenido': 'id_contenido',
            'id_perfil': 'id_perfil',
            'thumb_up': 'thumb_up'
        }
        self._id_rating = id_rating
        self._id_contenido = id_contenido
        self._id_perfil = id_perfil
        self._thumb_up = thumb_up

    @classmethod
    def from_dict(cls, dikt) -> 'Rating':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Rating of this Rating.  # noqa: E501
        :rtype: Rating
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id_rating(self) -> int:
        """Gets the id_rating of this Rating.

        ID del rating  # noqa: E501

        :return: The id_rating of this Rating.
        :rtype: int
        """
        return self._id_rating

    @id_rating.setter
    def id_rating(self, id_rating: int):
        """Sets the id_rating of this Rating.

        ID del rating  # noqa: E501

        :param id_rating: The id_rating of this Rating.
        :type id_rating: int
        """

        self._id_rating = id_rating

    @property
    def id_contenido(self) -> int:
        """Gets the id_contenido of this Rating.

        ID del contenido  # noqa: E501

        :return: The id_contenido of this Rating.
        :rtype: int
        """
        return self._id_contenido

    @id_contenido.setter
    def id_contenido(self, id_contenido: int):
        """Sets the id_contenido of this Rating.

        ID del contenido  # noqa: E501

        :param id_contenido: The id_contenido of this Rating.
        :type id_contenido: int
        """
        if id_contenido is None:
            raise ValueError("Invalid value for `id_contenido`, must not be `None`")  # noqa: E501

        self._id_contenido = id_contenido

    @property
    def id_perfil(self) -> int:
        """Gets the id_perfil of this Rating.

        ID del perfil del usuario  # noqa: E501

        :return: The id_perfil of this Rating.
        :rtype: int
        """
        return self._id_perfil

    @id_perfil.setter
    def id_perfil(self, id_perfil: int):
        """Sets the id_perfil of this Rating.

        ID del perfil del usuario  # noqa: E501

        :param id_perfil: The id_perfil of this Rating.
        :type id_perfil: int
        """
        if id_perfil is None:
            raise ValueError("Invalid value for `id_perfil`, must not be `None`")  # noqa: E501

        self._id_perfil = id_perfil

    @property
    def thumb_up(self) -> bool:
        """Gets the thumb_up of this Rating.

        Indica si el usuario dio una review positiva en caso de estar a true o negativa en caso de estar a false.  # noqa: E501

        :return: The thumb_up of this Rating.
        :rtype: bool
        """
        return self._thumb_up

    @thumb_up.setter
    def thumb_up(self, thumb_up: bool):
        """Sets the thumb_up of this Rating.

        Indica si el usuario dio una review positiva en caso de estar a true o negativa en caso de estar a false.  # noqa: E501

        :param thumb_up: The thumb_up of this Rating.
        :type thumb_up: bool
        """
        if thumb_up is None:
            raise ValueError("Invalid value for `thumb_up`, must not be `None`")  # noqa: E501

        self._thumb_up = thumb_up
