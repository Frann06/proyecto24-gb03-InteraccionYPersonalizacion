# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Visualizacion(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id_visualizacion: int=None, id_perfil: int=None, id_contenido: int=None, fecha_visualizacion: datetime=None, progreso: float=None):  # noqa: E501
        """Visualizacion - a model defined in Swagger

        :param id_visualizacion: The id_visualizacion of this Visualizacion.  # noqa: E501
        :type id_visualizacion: int
        :param id_perfil: The id_perfil of this Visualizacion.  # noqa: E501
        :type id_perfil: int
        :param id_contenido: The id_contenido of this Visualizacion.  # noqa: E501
        :type id_contenido: int
        :param fecha_visualizacion: The fecha_visualizacion of this Visualizacion.  # noqa: E501
        :type fecha_visualizacion: datetime
        :param progreso: The progreso of this Visualizacion.  # noqa: E501
        :type progreso: float
        """
        self.swagger_types = {
            'id_visualizacion': int,
            'id_perfil': int,
            'id_contenido': int,
            'fecha_visualizacion': datetime,
            'progreso': float
        }

        self.attribute_map = {
            'id_visualizacion': 'id_visualizacion',
            'id_perfil': 'id_perfil',
            'id_contenido': 'id_contenido',
            'fecha_visualizacion': 'fecha_visualizacion',
            'progreso': 'progreso'
        }
        self._id_visualizacion = id_visualizacion
        self._id_perfil = id_perfil
        self._id_contenido = id_contenido
        self._fecha_visualizacion = fecha_visualizacion
        self._progreso = progreso

    @classmethod
    def from_dict(cls, dikt) -> 'Visualizacion':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Visualizacion of this Visualizacion.  # noqa: E501
        :rtype: Visualizacion
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id_visualizacion(self) -> int:
        """Gets the id_visualizacion of this Visualizacion.

        ID único de la visualizacion  # noqa: E501

        :return: The id_visualizacion of this Visualizacion.
        :rtype: int
        """
        return self._id_visualizacion

    @id_visualizacion.setter
    def id_visualizacion(self, id_visualizacion: int):
        """Sets the id_visualizacion of this Visualizacion.

        ID único de la visualizacion  # noqa: E501

        :param id_visualizacion: The id_visualizacion of this Visualizacion.
        :type id_visualizacion: int
        """

        self._id_visualizacion = id_visualizacion

    @property
    def id_perfil(self) -> int:
        """Gets the id_perfil of this Visualizacion.

        ID del perfil del usuario  # noqa: E501

        :return: The id_perfil of this Visualizacion.
        :rtype: int
        """
        return self._id_perfil

    @id_perfil.setter
    def id_perfil(self, id_perfil: int):
        """Sets the id_perfil of this Visualizacion.

        ID del perfil del usuario  # noqa: E501

        :param id_perfil: The id_perfil of this Visualizacion.
        :type id_perfil: int
        """
        if id_perfil is None:
            raise ValueError("Invalid value for `id_perfil`, must not be `None`")  # noqa: E501

        self._id_perfil = id_perfil

    @property
    def id_contenido(self) -> int:
        """Gets the id_contenido of this Visualizacion.

        ID del contenido visualizado  # noqa: E501

        :return: The id_contenido of this Visualizacion.
        :rtype: int
        """
        return self._id_contenido

    @id_contenido.setter
    def id_contenido(self, id_contenido: int):
        """Sets the id_contenido of this Visualizacion.

        ID del contenido visualizado  # noqa: E501

        :param id_contenido: The id_contenido of this Visualizacion.
        :type id_contenido: int
        """
        if id_contenido is None:
            raise ValueError("Invalid value for `id_contenido`, must not be `None`")  # noqa: E501

        self._id_contenido = id_contenido

    @property
    def fecha_visualizacion(self) -> datetime:
        """Gets the fecha_visualizacion of this Visualizacion.

        Fecha y hora de la visualización  # noqa: E501

        :return: The fecha_visualizacion of this Visualizacion.
        :rtype: datetime
        """
        return self._fecha_visualizacion

    @fecha_visualizacion.setter
    def fecha_visualizacion(self, fecha_visualizacion: datetime):
        """Sets the fecha_visualizacion of this Visualizacion.

        Fecha y hora de la visualización  # noqa: E501

        :param fecha_visualizacion: The fecha_visualizacion of this Visualizacion.
        :type fecha_visualizacion: datetime
        """
        if fecha_visualizacion is None:
            raise ValueError("Invalid value for `fecha_visualizacion`, must not be `None`")  # noqa: E501

        self._fecha_visualizacion = fecha_visualizacion

    @property
    def progreso(self) -> float:
        """Gets the progreso of this Visualizacion.

        Progreso de visualización en porcentaje  # noqa: E501

        :return: The progreso of this Visualizacion.
        :rtype: float
        """
        return self._progreso

    @progreso.setter
    def progreso(self, progreso: float):
        """Sets the progreso of this Visualizacion.

        Progreso de visualización en porcentaje  # noqa: E501

        :param progreso: The progreso of this Visualizacion.
        :type progreso: float
        """
        if progreso is None:
            raise ValueError("Invalid value for `progreso`, must not be `None`")  # noqa: E501

        self._progreso = progreso
